System(javaVM).out.print/ln(line)/


VO(Value Object) : 직접 데이터를 넣어주기 보다는 넣어진 데이터를 getter를 통해 사용하는 Read only 속성을 가진 불변 클래스. 중간에 값을 바꿀 수 없으며 새로 만들어야함

DTO(Data Transfer Object) : VO와유사하나 불변값을 가지지않음

import annotation.~ : @ 를 기반으로한 annotation을 사용시 선언

HttpServletRequest : 하나의 요청에서 HttpServletRequest 객체가 소멸하기 까지 상태정보를 유지하고자 할 때, 한번의 요청으로 실행된 페이지끼리 정보를 공유하고자 할 때 사용
ㄴex) protected void doGet((HSRequest)request , (HSResponse)response)

HttpServletResponse : ServletResponse 인터페이스는 클라이언트의 요청에 응답하기 위한 출력스트림을 추출하거나 버퍼의 크기를 설정하고, 응답할 내용의 타입과 문자셋을 설정하는 등의 작업을 수행할 수있다. 

HttpServletResponse는 ServletResponse 인터페이스를 상속 받아 웹 애플리케이션을 개발하면서 응답 관련 작업을 수행하기 위한 HTTP 프로토콜 통신 기반의 응답 관련 메소드들도 확장하여 포함하고 있다.

extern int : 외부변수의 선언. 다른 모듈에서 정의된 변수를 임포트해서 사용하는 것 이므로 이 문장에서 변수를 위한 메모리할당은 일어나지 않음.
정의는 하지않았고 선언만 한 경우

throw @Exception : 구문의 에러 / 예외처리를 담당. ex) throws servlet exception, IOException


preparedstatement : statement 와 다르게 캐쉬를 채용함,쿼리 실행시 문장분석, 컴파일, 실행의 3단계를 거치며 이 작업이후 PS 는 캐쉬를남겨 다음작업에서의 DB부하가 줄어듦


++ 기존변수 값 1씩 증가

비트 이동연산 곱셈연산 i << 1 = 2^1 / << 2 = 2^2 / << 3 = 2^3
>> 나눗셈연산

<<,>> 비트 이동연산의 연산방식 > 비트를 배수연산할 숫자만큼(>>3일경우 3칸) 오른쪽으로 이동함, 왼쪽의 남는 칸은 양수는 0, 음수는 1로 채움.
>>> 이동 후 남은칸을 무조건 1로 채움(양수)

* 비트 논리 연산자 &(and)를 이용하여 원하는 byte만 추출 가능 ex)  b = (i >> 16) * 0xff/f = 1111 = 15/  Tech interview 질문

byte의 첫자리수가 1 일경우 음수, 2의보수로 환산을하므로
 * -13
 * 00001101 = 13
 * 11110010
 * +      1
 * 11110011 = -13
  (00001100(+1) = 13) 
 같은 계산을 함

 

 /*
아나그램의 비교연산
1 - 경우의수를 나열하고 해당되는 조합을 픽업 - n! 팩토리얼을 사용한 연산
2 - 알파벳의 sorting을 이용한 연산 - nlog n 연산
 */

32비트데이터를 이용하여 True/false값을 저장할 때 비트 논리 연산 &(and)을 사용, ( 소유주 그룹 게스트의 사용권한을 표기할 때 )d rwx r-x r-x 
and 논리연산을 이용한 true/false값 비교 > 
(값이 들어있는 변수) & (특정 언어를 표현한 비트 값) > & 연산의 결과와 (특정 언어를 표현한 비트 값)이 같은지 비교.
비트 and 연산에서는 0을 사용할 시 원하지 않는 값을 거를 수 있음(비교대상자 간 비트가 동일해야 True값을 표현할 수 있기 때문)

비트연산 if (var & 0xX0) > 0 = X의 1/0 (true/false) 구분 // tech interview

0x00 = 16진수
0b00 = 2진수

i++ i-- 등의 후위연산자는 해당 라인을 실행 후 값을 증감시킴 / --i ++i 등의 전위연산자는 해당 값 연산을 우선함
int i = 7;
i = i++;
= 7

int i = 2;
int result = i++ + i++ * i++; = 12

연산자 우선수위: 1) ++, --  2) *, /, % 3) +, -  4) =

변수는 전/후위 연산자로 인하여 값이 변화할 수 있으나 값은 전/후위 연산자에 의하여 변경될 수 없음


java에서 else는 가장 가까운 if에 소속됨

case값으로 상수 사용가능( finat int Var = 0, Var2 = 1 , Var3 = 2;...)
case값으로 변수사용 불가, 다만 값이 바뀌지 않은 final 변수는 사용 가능

상수를 enum을 사용해 별도 그룹으로 관리 가능( enum Level { var1 , var2 , var3 })
enum 변수에는 그 타입에 정의된 값만 저장할 수 있다.

while 문 label - label: while (x <= ~){} // 라벨명 : 반복문1 { 반복문2 { break:라벨명; }}  *
> label의 밖으로 나감. 없이 break;할경우 내부 루프에서만 탈출후 전체루프를 다시시작.





protected void doPost (HttpServletRequest request, HttpServletResponse response)
throws ServletException, IOException{
  
  Connection conn(variable) = null;
  PreparedStatement stmt(v) = null;
  ResultSet rs = null;
  try{
      ServletContext sc = this.getServletContext();
      conn = (Connection) sc.getAttribute("conn");
      stmt = conn. preparedStatement("/*sql문*/Select A, B From C" + "Where A=? And D=?");
      stmt.setString(1, request.getParameter("A"));
      stmt.setString(2, request.getParameter("D"));
      rs = stmt.executeQuery();
      if(rs.next()) {
        Member(function) member(variable) = new Member()
      }
  }
}
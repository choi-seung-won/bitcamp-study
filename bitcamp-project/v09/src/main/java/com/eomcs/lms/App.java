/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.eomcs.lms;

import java.sql.Date;
import java.util.Scanner;

public class App {

  
  static Scanner scan = new Scanner(System.in);
  static Scanner keyboard = new Scanner(System.in);
  static Scanner keyboard1 = new Scanner(System.in);
  
    static class Lesson {
    //    int[] count = new int[size];
    int number;
    String title;
    String description;
    Date startdate;
    Date enddate;
    int totalhours;
    int dayhours;  
  }
    static class Member {
      int no;
      String name;
      String email;
      String password;
      String photo;
      String tel;
      Date registeredDate;
    }
    
    static class Board {
      int no;
      String title;
      Date date;
      int viewCount;
    }
    
    static final int LSIZE = 10000;
    static final int MSIZE = 20000;
    static final int BSIZE = 25000;
    
    static Lesson[] lessons = new Lesson[LSIZE];
    static Member[] members = new Member[MSIZE];
    static Board[] boards = new Board[BSIZE]; // Board Instance의 주소를 담을 레퍼런스 배열을 준비한다.
    
    static int Lcount = 0;
    static int mcount = 0;
    static int bcount = 0;
    
  public static void main(String[] args) {

    
    String cmd;
    
    do {
      
      System.out.print("\n명령> ");
      
      cmd = scan.nextLine();
      
      switch(cmd)
      {
        case "/lesson/add":
          
          addLesson();
          
          
          break;
          
        case "/lesson/list":
          
          listLesson();
          
          break;
          
        case "/member/add":
          
          addMember();
          
          break;
          
        case "/member/list":
          
         ListMember();
          break;
          
        case "/board/add":
                  
            addBoard();
            
            
          
          break;
          
        case "/board/list":
          
          ListBoard();
          
          break;
          
          
        default:
          if(!cmd.equalsIgnoreCase("quit")) {
            System.out.println("실행불가능");
          }
      }

      
    }while(!cmd.equalsIgnoreCase("quit"));
     System.out.println("안 녕!");
      
      scan.close();
      keyboard.close();
      keyboard1.close();
    }
  
    // count[0] = 0;
  static void addLesson() {
    Lesson ls = new Lesson(); //인스턴트 배열 매 루프마다 생성 - 멤버 설계도에 따라 메모리를 만듦
    
    System.out.print("번호?");

    ls.number = scan.nextInt();

    scan.nextLine();

    System.out.print("수업명?\n");    

    ls.title = scan.nextLine();
    System.out.print("수업내용?\n");

    ls.description = scan.nextLine();

    System.out.print("시작일?\n");    

    ls.startdate = Date.valueOf(scan.next());    

    System.out.print("종료일?\n");

    ls.enddate = Date.valueOf(scan.next());

    System.out.print("총수업시간?\n");

    ls.totalhours = scan.nextInt();

    System.out.print("일수업시간?\n");

    ls.dayhours = scan.nextInt();

    scan.nextLine();//남아있는 줄바꿈 값 제거
    
    //수업 정보를 담고 있는 인스턴스의 주소를 나중에 사용할 수 있도록 레퍼런스 배열에 보관
    lessons[Lcount++] = ls;
    
    //분리된 코드(메서드)를 실행(호출)시킨다 > 메서드를 호출한다 라고 표현
    
  }
  static void listLesson() {
    for(int i = 0; i < Lcount; i ++) 
    {
      Lesson lss = lessons[i];
      
      System.out.printf("%d, %s ,%s ~ %s,%d\n",lss.number,lss.title,lss.startdate,
          lss.enddate,lss.totalhours);
    }
    
  }//listlesson end
  static void addMember() {
    Member member = new Member();

    System.out.print("번호? ");
    member.no = keyboard.nextInt();
    keyboard.nextLine(); // 줄바꿈 기호 제거용

    System.out.print("이름? ");
    member.name = keyboard.nextLine();

    System.out.print("이메일? ");
    member.email = keyboard.nextLine();

    System.out.print("암호? ");
    member.password = keyboard.nextLine();

    System.out.print("사진? ");
    member.photo = keyboard.nextLine();

    System.out.print("전화? ");
    member.tel = keyboard.nextLine();

    member.registeredDate = new Date(System.currentTimeMillis());

    // 회원 정보가 담겨있는 인스턴스의 주소를 레퍼런스 배열에 보관한다.
    members[mcount++] = member;
    
  }
  
  static void ListMember() {
    
    for (int i = 0; i < mcount; i++) {
      Member memberi = members[i];
      System.out.printf("%d, %s, %s, %s, %s\n", 
          memberi.no, memberi.name, memberi.email, 
          memberi.tel, memberi.registeredDate);
    }
  }
  
  static void addBoard()
  {
    
    Board board = new Board();
    //     Board b = new Board(); // Board설계에따라 메모리 준비에서 리턴

         System.out.print("번호? ");
         board.no = keyboard.nextInt();
         keyboard.nextLine(); // 줄바꿈 기호 제거용

         System.out.print("내용? ");
         board.title = keyboard.nextLine();

         board.date = new Date(System.currentTimeMillis());

         board.viewCount = 0;
         
         boards[bcount++] = board;
    
  }
  
  static void ListBoard() {
    
    for(int i = 0; i < bcount; i ++) {
      
      Board boardss = boards[i];
      
//      Board b = boards[i];
      System.out.printf("%d, %s, %s, %d\n", boardss.no, boardss.title, boardss.date, 
          boardss.viewCount);
    }
    
  }
  
 }

 


//System.out.println("daily?");
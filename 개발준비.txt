git / sun / cvs
eclipse,visual studio code
JDK(groalVM
gradle


PShell
iwr -useb get.scoop.sh | iex

graalvm install
-https://github.com/graalvm/graalvm-ce-builds/releases \\ java11
유니버설 가상버신 : JVM, Nodejs 포함
visual studio code VSCode
일반 및 개발 용 편집기
자바 스크립트로 만든 프로그램
크롬 웹 브라우저를 기반으로 실행됨.\
소스코드(java,html,.css,js)를 편집하기 위해 설치
일반 텍스트(txt,md)를  편집할 때도 사용한다.


c:\bitcamp\ - graalvm 압축해제
graalvm의 bin 폴더를 실행 경로(path)에 추가한다
path에 추가> 모든 디렉토리에서 해당 프로그램을 실행가능
미등록>해당 프로그램의 path정보가 없어 실행불가
등록방법 - 시스템 환경 변수 편집
graalvm 설치된 폴더 JAVA_HOME 이름으로 등록
자바 프로그램 중에서는 JDK(JRE)를 찾을 때 java_home으로 등록된 경로를 찾기 때문
jdk(java development kit)을 설치한 후에는 반드시 이 환경변수에 설치 디렉토리의 경로를 등록하라

통합 개발환경(IDE) eclipse
작업 폴더(workspace 디렉토리)/개발환경 설정
eclipse-inst-win64.exe execute
update

eclipse-enterprise version 설치 execute
워크스페이스 작업폴더 지정 : c:\users\user\eclipse-workspace
eclipse 사용 환경 설정
JDK 경로 확인 및 지정
window menu

eclipse preference java-nodes > installed jres jdk설치확인
java source code를 저장할 때 사용할 인코딩 규칙 설정 (general-workspace)txtfileencoding utf8

general-editors-text editors
기본편집기의 실행환경설정
displayed tab width=2 insert spaces for tabs = Yes
show print margin = Yes print number column = 100
show white space characters() = Yes
> configure visibility carrage return/line feed = No
Transparency level = 30

set web encoding
web > JSP/HTML/CSS Files>encoding utf8
general > appearance >colors and fonts
>"Basic">Text font


github upload(push)

github 저장소준비
회원가입
회원 인증 메일 확인
로그인
"bitcamp-study" 저장소 생성
개발pc에 github.com의 저장소 복제
github.com의 저장소복제


저장소 복제할 폴더 생성
c:\Users\user\git 폴더 생성
$(=sdk) git clone github_storage_address


git howtobasic
addfile
bitcamp-study\test1.txt 생성
git push


.git을 통하여 업로드/다운로드

로컬저장소에 백업 대상 목록작성: $ git add test1.txt
로컬저장소에 백업: $ git commit -m "저장하는이유"
로컬저장소의 내용을 git 서버에 업로드: $ git push


로컬 git user identify
*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.


git add .(현재/하위폴더 모든변경점)


Fowler, Martin - Refactoring

https://github.com/kamranahmedse/developer-roadmap



hardware input > unix / linux shell script(bash,zsh,tsh,bsh) > cpu,ram,HDD > hardware(software driver) 

git input cmd > push (commit)
git output cmd > pull (checkout)

OS마다 사용하는 코드가다름


진수의 간략기록
ex)16진수/ 0xb6f0 > (0x/진수정의)전기신호 = cpu에게 명령하는방식, 2/16진수사용
명령어는 RandomAccessMemory 에저장

OS가 총괄하는 AP/CPU/computer 작동원리 
> HDD에 저장된 작성완료한 명령어input(cpu마다 명령어가 다름. 규격에 따른 작성 요구/CPU Instruction) 
> RAM에Loading(싣다) > CPU에전송 > RAM에 실행결과 저장 > 

clock(hz/Ghz) > 신호의 정의범주(신호 분간을 위한 범주/단위책정)단위
>Hz↑=사양이 증가할수록 전력소모증가 = 발열증가
>Hz를 낮추고 연산의 분산/멀티코어 채용


RandomAccessMemory = 8bit cell사용 2^7=128  ISO/IEC 646/ 2^8=256 ISO 8859 (ASCII American Standard Code for Information Interchange)


assembles language =/ machine language
assembly language (low level language) -> complier -> machine language


program excute >
c>compiler
source file 1 compiler A linux based machine lang
	  2 compiler B windows based machine lang

컴파일러는 실행파일과 OS구성을 결합함

Java Source > Java Compiler > bytecode(가상기계어) > Win/Linux/macOS Bytecode executor(Java Virtual Machine) > win/linux/mac (doesnt matter bout OS)
->CPU run

가상기계어(IR) execute > engine = VM = Runtime

LLVM(LowLevelVirtualMachine) IR(intermediate representation)

source execute > interpreter , player , engine ( ex- asp php j script)


programs that executed by machine language - exe com (bat is not)

.php > php engine >can be execute on windows
.js > JavaScript engine(=V8) > =

(JAVA)SOURCECODE ((JAVA)COMPILER) >IR = Bytecode (RUN)> VM(=Interpreter/engine/player/viewer) > (RUS)OS

IR은 VM을거쳐 OS에서 실행되기 전 VM에서 다시 Compile을 거치며 Temp와같은 임시저장소에 저장후 OS로 전송됨(속도향상 도모)

unix =/ linux (compile 요구, 높은 호환성)

OS(android포함)-JIT Compiler내장
JIT-설치시 AOT대비 설치속도가 빠름,실행시 번역중 딜레이있음
Ahead Of Time-AOT방식 컴파일러(프로그램의 설치시점에 compile-기계어변환함/추후 실행의경우 기존보다 빠른 실행속도)
JIT+AOT - 설치후 essential compile 대기시간 나머지 Compile

vm-가상머신실행/IR을 읽을경우
engine-일반실행/(js등의)sourcecode읽을경우


java code (JavaCompiler 번역/문법오류검사) -> IR(기계어검사) -> vm -> OS / 실행시간 짧음
js(source/Interpreted language-컴파일러를 거쳐서 기계어로 변환되지 않는 언어) -> 실행시 문법검사를 거침+실행시 해석필요/실행시간 길어짐

JIT / AOT는 이를 해결하기위하여 개발된 방식

.classfile=bytecode file

javap(profile)
javac(compile)

compilefirst> java .class





.js(javascript) (javascript/engine/(interpreter))> node.exe > os
c 와같이 linker를 이용한 라이브러리/script 통합을 하지않음. 
simillar .py .php .pl

java는 가상기계어를 채용 JVM을 이용하여 VM에서 실행. java는 compile/interpreter 결합방식 채용
java(javacompiler)>Bytecode(P-code/IR)(ex-.class) >JVM(java.exe)
.c>.obj>.exe

CLI > Command Line Interface(terminal/Powershell)


file sort rule
src
  branch main folder
    branch java < java sourcefile ex).java
    branch resources < 실행시 이용되는 기타 파일.properties,txt,xml~
    branch webapp
  branch test
    branch java < unit test 실시하는 java sourcefile ex).java
    branch resources < unit test 등에 사용하는 기타파일


bitcamp-study
  branch bitcamp-docs
  branch bcjava
    branch src/bin
  branch bitcamp-java-project
    branch src
    branch bm



empty folder will not upload on github_storage



javac -d bin/main 
java -cp

패키지에 소속하는 sourcefile은 컴파일시 주소가 명기된 폴더에 생성됨
com 폴더는 패키지폴더로 정의됨

//java-kotlin같은 java 호환언어는 다른 source여도 컴파일시 동일결과를 산출 따라서 언어의 차이에따라 패키지폴더가 구분될 수 없어 충돌이일어남 > main() java폴더가 생성되지 않음

java -cp : class path 명령어, package경로가 선언된 파일의 경우 package folder를 지정함 이로 인하여 하위폴더의 java(class)를 구분할 수 있음// 확인필요

package 소속 .class 실행시 경로는 .com 이전까지의 폴더만 표기후 공란요구
example  java -cp bin/main .com/ohoracs/basic/Hello3


cpu 논리회로의 작용방식 체크*

PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -d bin/main src/main/java/Hello5.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> java -cp bin/main Hello5
*package example


web dev
요구사항 식별 > 분석 > 설계
//빌드(빌드도구 예시 Ant -> Maven > Gradle)\/*
프로젝트폴더 준비
웹에 필요한 파일 .java (compile > .class).xml .html .css .js
unit test(ex-junit)
as result > .jar .zip .war(배치파일) + API(해당 app을 응용하는 개발자를위한)문서생성
>> (업로드) 서버배치() */

eclipse는 설정파일 없이는 프로젝트폴더 인식불가

<name></name><tag></tag>(element,metadata)

복잡한 제어를 할 수 있는기능>XML

groovy 언어를사용해 설정파일(스크립트) 적용
build.gradle < gradle을 설정도구로 사용했다는 설정파일

.c compile결과는 변환후 기계어(CPU instruction).exe 파일로 생성됨. 구문은 링커를통하여 라이브러리를 사용, .exe생성. 따라서 실행이 빠름,기계어로의 compile시 플랫폼에 종속됨(cpu/os) // compile 방식
.js의 경우 nodejs에서 실행할 부분만 검사시행후 실행, 오류있어도 해당구문 실행이 없으면 에러없음,배포시 오류존재가능. source를 읽어 실행하므로 속도가 느림, compile이없어 코드변환이 편리 // interpreter 방식
.java의 경우 JavaCompiler을 통해서 IR인 .class로의 변환 이후에도 JVM을 이용해야 실행가능/ 실행속도 C보다 느림> 보완을위해 JIT/AOT 컴파일러방식 등장
 / 인터프리터,컴파일러 결합방식

DSL - 특정 영역에서 사용할 언어(build.gradle 설정파일에 사용할 언어)

tree /a /f *커맨드라인 명령어

.js / javascript는 

class-분류명, function을 목적에따라 분류하는 문법- 모든 function은 class에 소속해야함
java-언어의 관리/유지보수를 목적으로하는 객체지향언어, function의 그룹분류를 쉽게하기 위함
java,c++,python...(객체지향프로그램 oop)


@Override annotation > 기존에 있는 기능을 임의로 재정의함


(blcok단위도 마찬가지로 생각할 수 있음)1byte=8bit // 2^(bit)수 만큼 
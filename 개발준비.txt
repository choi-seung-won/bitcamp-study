git / sun / cvs
eclipse,visual studio code
JDK(groalVM
gradle


CTRL D = Line clear

PShell
iwr -useb get.scoop.sh | iex

graalvm install
-https://github.com/graalvm/graalvm-ce-builds/releases \\ java11
유니버설 가상버신 : JVM, Nodejs 포함
visual studio code VSCode
일반 및 개발 용 편집기
자바 스크립트로 만든 프로그램
크롬 웹 브라우저를 기반으로 실행됨.\
소스코드(java,html,.css,js)를 편집하기 위해 설치
일반 텍스트(txt,md)를  편집할 때도 사용한다.


c:\bitcamp\ - graalvm 압축해제
graalvm의 bin 폴더를 실행 경로(path)에 추가한다
path에 추가> 모든 디렉토리에서 해당 프로그램을 실행가능
미등록>해당 프로그램의 path정보가 없어 실행불가
등록방법 - 시스템 환경 변수 편집
graalvm 설치된 폴더 JAVA_HOME 이름으로 등록
자바 프로그램 중에서는 JDK(JRE)를 찾을 때 java_home으로 등록된 경로를 찾기 때문
jdk(java development kit)을 설치한 후에는 반드시 이 환경변수에 설치 디렉토리의 경로를 등록하라

통합 개발환경(IDE) eclipse
작업 폴더(workspace 디렉토리)/개발환경 설정
eclipse-inst-win64.exe execute
update

eclipse-enterprise version 설치 execute
워크스페이스 작업폴더 지정 : c:\users\user\eclipse-workspace
eclipse 사용 환경 설정
JDK 경로 확인 및 지정
window menu

eclipse preference java-nodes > installed jres jdk설치확인
java source code를 저장할 때 사용할 인코딩 규칙 설정 (general-workspace)txtfileencoding utf8

general-editors-text editors
기본편집기의 실행환경설정
displayed tab width=2 insert spaces for tabs = Yes
show print margin = Yes print number column = 100
show white space characters() = Yes
> configure visibility carrage return/line feed = No
Transparency level = 30

set web encoding
web > JSP/HTML/CSS Files>encoding utf8
general > appearance >colors and fonts
>"Basic">Text font


github upload(push)

github 저장소준비
회원가입
회원 인증 메일 확인
로그인
"bitcamp-study" 저장소 생성
개발pc에 github.com의 저장소 복제
github.com의 저장소복제


저장소 복제할 폴더 생성
c:\Users\user\git 폴더 생성
$(=sdk) git clone github_storage_address


git howtobasic
addfile
bitcamp-study\test1.txt 생성
git push


.git을 통하여 업로드/다운로드

로컬저장소에 백업 대상 목록작성: $ git add test1.txt
로컬저장소에 백업: $ git commit -m "저장하는이유"
로컬저장소의 내용을 git 서버에 업로드: $ git push


로컬 git user identify
*** Please tell me who you are.

Run

  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

to set your account's default identity.
Omit --global to set the identity only in this repository.


git add .(현재/하위폴더 모든변경점)


Fowler, Martin - Refactoring

https://github.com/kamranahmedse/developer-roadmap



hardware input > unix / linux shell script(bash,zsh,tsh,bsh) > cpu,ram,HDD > hardware(software driver) 

git input cmd > push (commit)
git output cmd > pull (checkout)

OS마다 사용하는 코드가다름


진수의 간략기록
ex)16진수/ 0xb6f0 > (0x/진수정의)전기신호 = cpu에게 명령하는방식, 2/16진수사용
명령어는 RandomAccessMemory 에저장

OS가 총괄하는 AP/CPU/computer 작동원리 
> HDD에 저장된 작성완료한 명령어input(cpu마다 명령어가 다름. 규격에 따른 작성 요구/CPU Instruction) 
> RAM에Loading(싣다) > CPU에전송 > RAM에 실행결과 저장 > 

clock(hz/Ghz) > 신호의 정의범주(신호 분간을 위한 범주/단위책정)단위
>Hz↑=사양이 증가할수록 전력소모증가 = 발열증가
>Hz를 낮추고 연산의 분산/멀티코어 채용


RandomAccessMemory = 8bit cell사용 2^7=128  ISO/IEC 646/ 2^8=256 ISO 8859 (ASCII American Standard Code for Information Interchange)


assembles language =/ machine language
assembly language (low level language) -> complier -> machine language


program excute >
c>compiler
source file 1 compiler A linux based machine lang
	  2 compiler B windows based machine lang

컴파일러는 실행파일과 OS구성을 결합함

Java Source > Java Compiler > bytecode(가상기계어) > Win/Linux/macOS Bytecode executor(Java Virtual Machine) > win/linux/mac (doesnt matter bout OS)
->CPU run

가상기계어(IR) execute > engine = VM = Runtime

LLVM(LowLevelVirtualMachine) IR(intermediate representation)

source execute > interpreter , player , engine ( ex- asp php j script)


programs that executed by machine language - exe com (bat is not)

.php > php engine >can be execute on windows
.js > JavaScript engine(=V8) > =

(JAVA)SOURCECODE ((JAVA)COMPILER) >IR = Bytecode (RUN)> VM(=Interpreter/engine/player/viewer) > (RUS)OS

IR은 VM을거쳐 OS에서 실행되기 전 VM에서 다시 Compile을 거치며 Temp와같은 임시저장소에 저장후 OS로 전송됨(속도향상 도모)

unix =/ linux (compile 요구, 높은 호환성)

OS(android포함)-JIT Compiler내장
JIT-설치시 AOT대비 설치속도가 빠름,실행시 번역중 딜레이있음
Ahead Of Time-AOT방식 컴파일러(프로그램의 설치시점에 compile-기계어변환함/추후 실행의경우 기존보다 빠른 실행속도)
JIT+AOT - 설치후 essential compile 대기시간 나머지 Compile

vm-가상머신실행/IR을 읽을경우
engine-일반실행/(js등의)sourcecode읽을경우


java code (JavaCompiler 번역/문법오류검사) -> IR(기계어검사) -> vm -> OS / 실행시간 짧음
js(source/Interpreted language-컴파일러를 거쳐서 기계어로 변환되지 않는 언어) -> 실행시 문법검사를 거침+실행시 해석필요/실행시간 길어짐

JIT / AOT는 이를 해결하기위하여 개발된 방식

.classfile=bytecode file

javap(profile)
javac(compile)

compilefirst> java .class





.js(javascript) (javascript/engine/(interpreter))> node.exe > os
c 와같이 linker를 이용한 라이브러리/script 통합을 하지않음. 
simillar .py .php .pl

java는 가상기계어를 채용 JVM을 이용하여 VM에서 실행. java는 compile/interpreter 결합방식 채용
java(javacompiler)>Bytecode(P-code/IR)(ex-.class) >JVM(java.exe)
.c>.obj>.exe

CLI > Command Line Interface(terminal/Powershell)


file sort rule
src
  branch main folder
    branch java < java sourcefile ex).java
    branch resources < 실행시 이용되는 기타 파일.properties,txt,xml~
    branch webapp
  branch test
    branch java < unit test 실시하는 java sourcefile ex).java
    branch resources < unit test 등에 사용하는 기타파일


bitcamp-study
  branch bitcamp-docs
  branch bcjava
    branch src/bin
  branch bitcamp-java-project
    branch src
    branch bm



empty folder will not upload on github_storage



javac -d bin/main 
java -cp

패키지에 소속하는 sourcefile은 컴파일시 주소가 명기된 폴더에 생성됨
com 폴더는 패키지폴더로 정의됨

//java-kotlin같은 java 호환언어는 다른 source여도 컴파일시 동일결과를 산출 따라서 언어의 차이에따라 패키지폴더가 구분될 수 없어 충돌이일어남 > main() java폴더가 생성되지 않음

java -cp : class path 명령어, package경로가 선언된 파일의 경우 package folder를 지정함 이로 인하여 하위폴더의 java(class)를 구분할 수 있음// 확인필요

package 소속 .class 실행시 경로는 .com 이전까지의 폴더만 표기후 공란요구
example  java -cp bin/main .com/ohoracs/basic/Hello3


cpu 논리회로의 작용방식 체크*

PS C:\Users\user\git\bitcamp-study\bitcamp-java> javac -d bin/main src/main/java/Hello5.java
PS C:\Users\user\git\bitcamp-study\bitcamp-java> java -cp bin/main Hello5
*package example


web dev
요구사항 식별 > 분석 > 설계
//빌드(빌드도구 예시 Ant -> Maven > Gradle)\/*
프로젝트폴더 준비
웹에 필요한 파일 .java (compile > .class).xml .html .css .js
unit test(ex-junit)
as result > .jar .zip .war(배치파일) + API(해당 app을 응용하는 개발자를위한)문서생성
>> (업로드) 서버배치() */

eclipse는 설정파일 없이는 프로젝트폴더 인식불가


<name></name><tag></tag>(element,metadata)

복잡한 제어를 할 수 있는기능>XML

groovy 언어를사용해 설정파일(스크립트) 적용
build.gradle < gradle을 설정도구로 사용했다는 설정파일

.c compile결과는 변환후 기계어(CPU instruction).exe 파일로 생성됨. 구문은 링커를통하여 라이브러리를 사용, .exe생성. 따라서 실행이 빠름,기계어로의 compile시 플랫폼에 종속됨(cpu/os) // compile 방식
.js의 경우 nodejs에서 실행할 부분만 검사시행후 실행, 오류있어도 해당구문 실행이 없으면 에러없음,배포시 오류존재가능. source를 읽어 실행하므로 속도가 느림, compile이없어 코드변환이 편리 // interpreter 방식 - interpreter만 있다면 os에따른 컴파일이 필요없음. 최근은 JIT compiler를 사용하여 속도를 높이기도 함.
.java의 경우 JavaCompiler을 통해서 IR인 .class로의 변환 이후에도 JVM을 이용해야 실행가능/ 실행속도 C보다 느림> 보완을위해 JIT/AOT 컴파일러방식 등장
 / 인터프리터,컴파일러 결합방식

DSL - 특정 영역에서 사용할 언어(build.gradle 설정파일에 사용할 언어)

tree /a /f *커맨드라인 명령어

//.js / javascript는 

class-분류명, function을 목적에따라 분류하는 문법- 모든 function은 class에 소속해야함
java-언어의 관리/유지보수를 목적으로하는 객체지향언어, function의 그룹분류를 쉽게하기 위함
java,c++,python...(객체지향프로그램 oop)


@Override annotation > 기존에 있는 기능을 임의로 재정의함
toString - 객체 정보값을 문자열로 만들어 리턴하는 메소드


(blcok단위도 마찬가지로 생각할 수 있음)1byte=8bit // 2^(bit)수 만큼 


Application software 구조 - 기능단위로 묶인, 명령어가 들어있는 function의 집합을 역할에 따라 관리하기 쉽게 묶는문법인 class로 치환>단일 .java파일 내부에 하나이상의 class를 묶음
class의 관리를 위하여 package 도입(관리를위하여 디렉토리로 묶음) > .java는 package에 소속될수없음, .class는 해당 상위 .java파일의 첫줄에 선언한 package의 경로에 따라 생성관리됨
.java를 컴파일시 각각의 class는 .class파일로 변환됨
package로 .class를 관리시 .com.a.b 의경우 b에 미리 .class를 생성했어도 a 상위폴더에 package를 지정가능하여 /b/.class지정이 가능

SystemIntegretion - 신규프로젝트 - 기능추가
SystemMaintenence - 완료된프로젝트 - 기능추가및변경


//ObjectOrientedProgramming commandline map
Data 저장 - file Input/Output - 개발자가 직접 Data를 저장하는 도구(JDBC : DBMS를 사용하여 Data를 저장시키는 도구)사용법
MybatisFramework - JDBC를 쉽게 사용하게 해주는 도구 사용법
Data transfer > socket networking
Data -> web에서 결과송출 수단으로 HTML/CSS 선택
     서버관리 spring webMVC
     -> 최종사용자의 행동제어 .js (javascript) 선택
     bootstrap/jQuery 사용
     Data 구조화 알고리즘 - LinkedList / stack / Queue

literal - data표현
변수variable - data를 저장할 메모리 준비(선언) + array - 같은 유형의 메모리를 여러 개 준비시키는 문법
연산자 - data를 가공하는 도구
제어문(조건,반복문등) - 명령문의 실행흐름 제어
method(function) - 명령어를 관리하기 편하게 기능단위로 묶은 문법
class - method를 관리하기편하게 역할(Role=responsibility)단위로 분류시키는 문법 
 ㄴ상속 - 기존 명령 extend,새 기능 추가/변경
  //하위 3개문항을 다형성이라고 칭함
  ㄴ다형적변수 - 개념추상화, 같은 유형의 메모리를 지정하는 방법
  ㄴOverriding - 기존 method 재정의  // 기존 class에서 개발자가 정의한 변수의 재정의
   ㄴOverloading - 같은 이름의 유사기능 추가문법
 ㄴ 사용자 정의 데이터타입 - 메모리구조를 data에 맞게 커스터마이징 하는 문법 // ex('int=x' 선언시 정의되는 int)
  ㄴ접근제어(캡슐화) - method / memory의 접근을 제어
  ㄴinstance -
   ㄴ instance method - 인스턴스 메모리를 다루는 기능
  ㄴ생성자 - 인스턴스를 초기화시키는 기능
  DesignPattern - 효율적인 클래스 구조관리


CPU Instruction 에서 문자열과 정/난수등의 구분 > 문자열은 code로 저장
CharacterSetCode > 문자열을 저장하는 코드 ex)ASCII ISO-8859-1
부동소수점의 경우 정규화규칙을 정하여(IECC 754) 2진법으로 전기적신호로 변환함

2진수로 변환이 가능한것은 전기적신호로 변환할 수 있음(빛의경우 RGB, 0~255사용/참고 http://m.insightsemicon.com/m/m_article.html?no=128795)

jpg 용량 > 압축을통하기에 BMP보다 용량이작음
encoding > 2진수로 코드화를시킴 

정수값의 저장 > 문서에서 전기적 신호를 표기하는 방법인 2진수로 표현(Encoding/변환) > 실제 CPU Instruction인 전기적신호로 메모리에 저장
문자열의 저장 > CharacterSetCode(ISO-8859-1/문자를 8bit로 변환)의 규격으로 변환 > cpu instruction전기신호로 메모리에 저장
*java에서는 문자열을 내부규격으로 변환 (ex UCS-2/16bit)
논리 : true > 00000001 >CPU I
색상(pixel shows) : yellow > 11111111(R) 11111111(G) 00000000(B) 매 연산마다 3byte사용 > CPU Instruction전기신호로 변환

encoding : 값을 규칙에의하여 값'(진수값)으로 변환하는것
decoding : 값'을 복원하는것

데이터인코딩 ex)mpeg/H.264->  > 압축데이터(jpeg등) // 압축시 파일손상이 발생하여 해상도 및 품질이 하락 
복원(decoding) 시 Codec 요구

정수값을 2진수로 변환시 무조건적으로 2의보수 사용
부동소수점의경우 가수부(Magnitude방식으로 2진수로 변환)/지수부(K-excess방식으로 2진수로 변환) 로 표기/나눔
ㄴ Magnitude 방식으로서 음수양수를 같은값으로 치환, 부호를 첫 비트로 표현
ㄴ K-excess 방식으로 127bit 초과
문자>2진수로 변환시 UCS-2 CharacterSet을 준거하여 2진수로 변환
논리 > true : 1 / false : 0

HDD는 자석가루를 이용하여 데이터를 기록함, 따라서 전원공급이 사라져도 데이터가 유지가능.
RAM은 휘발성 메모리이기에 전원공급이 끊어지면 데이터가 소멸함.
SDD는 내장 배터리가 있으므로 데이터가 유지가능.
windows 저장장치HDD는 platter의 관리를 위하여 platter의 저장공간을 track으로 칭함. 한번 arm이 데이터를 읽을경우 사용하는 track의 묶음을 cylinder라 칭한다.
track을 사용하여 데이터를 할당함. track은 sector로 분류 각각의 섹터에 512bytes를 저장, 해당 sector가 할당시 할당공간의 일부만을 사용할 수 없음,따라서 1byte를 저장하더라도 4096byte를 사용.
이 sector의 체계(format)을 관리/준비하는 시스템을 file system 으로 칭함 ex)NTFS/FAT32/Ext2,3
hdd의경우 sector가 불량이 생길경우 해당 sector만 badsector로 정리하고 사용을안함/SDD의경우 칩이기에 회선이 하나 고장날경우 사용이불가능
따라서 OS가 다를경우에 usb을 이용하여 파일을 옮기기위해선 usb포멧이 필요함
자석 기록방식이 수평기록방식 > 수직기록방식으로 개선되어 저장장치의 용량이 늘어남
flashmemory는 배터리가 존재하기에 기록저장기간이 6개월~2년후에 급속도로 줄어듦, 따라서 교체가 필요함


literal - 8진수 - 0~ / 2진수 - 0b~ / 16진수 - 0x~

literal - 4byte/8byte로만 나뉨 10진수-4byte
@bit가 표현가능한 값 = 2^@-1(0부터 값을 체크함) (5bit // ex - (2^5-1))

literal 1byte = 8bit, 2^31(4bytex8bit)
literal 1byte = 8bit, 2^31 = 'L'ong

sign magnitude - 맨 앞 bit만 1로 변환하는것으로 음수 표시 > 이 방식은 calc실행시 결과값이 비정상
1's complement(1의 보수 = 1이 되기위하여 보충하는 수) 방식 채용 > 모든 비트를 1이 되는 수로 바꾼다 > 진수표기에서 0을 1, 1을 0으로 변환
 > 32bit를 초과하는 1은 버려짐 > 음수를 더할 경우 결과값에 1을 추가해야함(번거로움/단점) 

1의 보수 + 1 = 2의 보수

2's complement(2의 보수//현대 language,computer에서는 모두 채용) > 음수를 저장할때 미리 1을 추가해둠 > 1의보수의 음수값 더할시 계산결과에 1을 추가하는 방식을 개선
>음수를 메모리에 저장시 정상적인 값 산출을 위하여 2의 보수방식으로 음수를 저장



//- 2의 보수를 만드는 방법 1:
//  - 모든 비트를 반대 값으로 만든 다음 1을 더한다.
//  예) 0010 1001(+41)
//      1101 0110(1의 보수)
//              1
//      ---------
//      1101 0111(-41)
//- 2의 보수를 만드는 방법 2:
//  - 오른쪽에서부터 1을 찾는다.
//  - 찾은 1의 왼쪽편에 있는 모든 비트를 반대 값으로 바꾼다.
//    예) 0010 1001(41) => 1101 0111(-41)
//                ^                ^
//    예) 0010 1100(44) => 1101 0100(-44)
//              ^                ^
//- 2의 보수를 만드는 방법 3:
//  - 2^n(8비트일 경우 2^8 = 256)에서 음수 값 만큼 뺀다.
//    예) -41 => 256 - 41 = 215 = 1101 0111
//    예) -44 => 256 - 44 = 212 = 1101 0100
//- 수의 범위(8비트 기준): -128 ~ +127

//4) K-초과(Excess-K)
//- 부동 소수점의 지수부(exponent)를 저장할 때 사용한다.
//- 오프셋 바이너리(offset binary) 또는 바이어스된 표기법(biased representation) 이라고도 한다.
//- K를 바이어스 값이라 부르며, 표현하려는 값에 더할 때 사용한다.
//    표현하려는 값 + 초과 값(K) = 결과
//- 바이어스 값(K)을 구하는 공식:
//    K = 2^(비트수 - 1)
//  예) 8비트일 경우 ---> K = 2^(8 - 1) = 2^7 = 128, 결과 = 128 + 값
//   1111 1111 = 128 + 127
//   1111 1110 = 128 + 126
//   1111 1101 = 128 + 125
//      ...
//   1000 0001 = 128 + 1
//   1000 0000 = 128 + 0
//   0111 1111 = 128 + (-1)
//      ...
//   0000 0010 = 128 + (-126)
//   0000 0001 = 128 + (-127)
//   0000 0000 = 128 + (-128)
//
//- IEEE 부동소수점 표준에서는 다음의 공식을 사용한다.
//    K = 2^(비트수 - 1) - 1
//  예) 8비트일 경우 ---> K = 2^7 - 1 = 127, 결과 = 127 + 값
//   1111 1111 = 127 + 128
//   1111 1110 = 127 + 127
//   1111 1101 = 127 + 126
//   1111 1100 = 127 + 125
//      ...
//   1000 0000 = 127 + 1
//   0111 1111 = 127 + 0
//   0111 1110 = 127 + (-1)
//      ...
//   0000 0010 = 127 + (-125)
//   0000 0001 = 127 + (-126)
//   0000 0000 = 127 + (-127)
//
//- 바이어스 방식으로 데이터를 저장할 때의 이점?
//  - 모든 비트가 0일 때 최소 값을 가지고, 모든 비트가 1일 때 최대 값을 갖는다.
//  - 이런 이유로 작은 값에서 큰 값으로 정렬되는 결과를 낳는다.
//  - 모든 비트가 정렬된 상태이기 때문에 부동소수점이든 정수이든 상관없이 값을 비교할 때 속도가 빠르다.
//  - '부호-크기', '1의 보수', '2의 보수'와 같은 방법으로 값을 표현할 경우, 비트들이 순차적으로 정렬되지 않는다.
//




보수방식을 채용하기에 cpu에는 -(minus)연산을 위한 장치가 존재하지않음

부동소수점 - 8byte가 기본 저장방식



2^7 = 128 영어 대소문 / 숫자 / 특수문자 등 90여개 문자에 대해 code value 정의 -> ISO-8859-1(ISO LATIN I = ASCII+western language/8bit->256문자 정의가능)
iso) A -> 01000001 B-> 01000010 C -> 01000011
실질적으로 사용하는 숫자 = 200여개 > 
>EUC-KR의 등장(16bit,=<windows 3.x ) english ->ISO-8859-1(8bit 그대로 사용) > 한글> 2byte code value로 정의 ex) 가 > 0xB0A1 / 각 > 0xB0A2 ... 각 문자별 정의
조합형 한글코드의 등장 > (KSC 5601) 128~159에 문자 코드를 사용하여 국제표준을 위반함. 이로인하여 .hwp에서만 기용됨
국가의 문서가 특정 기업에 종속되는것을 피하기 위하여 open document가 구현됨. 이는 xml을 이용함 / MS측도 코드소스를 공개하여 docx/pptx/xlsx포멧 공개(xml이용)
ECMA에 제출 후 국제표준으로 인정받음
MS949의 등장(11172자/windows95 +) 국제 표준X
CharSet 은 문자에대한 코드값을 정의한 표를 의미
UTF-8은 
JAVA 는 source를 내부적으로 다룰때는 unicode를 사용, 외부에 export / 통신을 할 경우 UTF-8을 사용함
JVM의 경우 내부적으로 UCS-2를 사용함
JVM(ucs-2) > file/Network(utf-8) / 반대의경우는 변환을 필요

UTF-8의 사용예시 - search engine에서 한글을 검색할 경우 %BA%..등의 코드를 접할 수 있음. 이는 UTF-8로의 인코딩을 했다는 기록
letter A > 0041(UCS-2 CharacterSet,encoding) > Transfer to website 41(encoding) > A(URL Encoding)
letter 가 > AC00 > EAB080(encoding) > %EA%B0%80(URL Encoding)
                   EAB080(decoding) <

Value를 polices/rules에 따라 Value를 가공하는것 > Encoding
가공된 Value를 rules에 따라 복구하는것 > Decoding


memory > RAM
cpu instruction의 명령은 32bit로 전해지며 이에따라 RAM에 명령을 저장-

2의보수값의 변환 - 전압값으로 전송된 instruction을 일정 전력저항값을 가진 논리회로(트랜지스터)를 거쳐 0,1을 역전> 산출된 신호를 보수값으로 변환, 이 과정에서 연산/계산을 하지않음, 논리회로를 따라서 결과값을 산출.

워드 = 연산을 통하여 저장된 장치로부터 레지스터에 옮겨 놓을 수 있는 데이터단위


 [\ u](CodeValue 값 사용 선언)

바이트의 정의

바이트의 정의는 여러 가지가 있으며, 서로 비슷한 뜻을 지니지만 섞어 쓸 경우 혼동을 부를 수도 있다.

일정한 개수의 비트로 이루어진 연속된 비트열. ‘일정한 개수’가 항상 정해진 건 아니지만, 최근에는 사실상 1바이트를 8비트로 간주하는 경우가 흔하다.

이진 컴퓨터의 워드 안에서 주소로 표현할 수 있는 가장 작은 단위에 해당하는 연속된 비트열. 예를 들어서 CDC 6000 계열의 메인프레임은 60비트 부동 소수점 실수를 6비트짜리 바이트 10개로 나눴으며, 따라서 대문자 로마자와 숫자만을 표현할 수 있는 천공 카드에 결과를 출력하기가 용이했다. 또한 CDC의 경우 12비트 I/O를 사용했기 때문에 12비트를 1바이트라 부르기도 했다. 이 정의 역시 최근에는 대부분 8비트를 가리키지만, 역사적으로 6비트, 7비트, 9비트 등의 바이트가 존재했다.

직렬 데이터 스트림(예를 들어서 모뎀 등)에서 의미를 가지는 가장 작은 연속된 비트열. 여기에는 시작 비트, 종료 비트, 패리티 비트 등이 포함될 수 있으며, 예를 들어 7비트 ASCII 부호를 저장할 경우 최소 7비트에서 최고 12비트가 한 바이트가 될 수 있다.

몇몇 프로그래밍 언어의 자료형.  자바의 byte 자료형은 항상 부호가 있으며 8비트로 정의된다. 예를 들어 C의 경우 한 바이트는 실행 환경에서 쓰이는 문자들을 담을 수 있을 만큼 큰 단위(C 표준 3.5항)로 정의되며, 한 바이트를 담는 char 자료형은 부호가 있느냐 없느냐와 상관 없이 적어도 8비트 이상(5.2.4.2.1항)이어야 한다(자바와 구분할 것).

How does a CPU load multiple bytes at once if memory is byte addressed?

> Because the width of the data bus and the size of the smallest addressable unit are two separate things.
Just because you can specify addresses at the byte level, does not mean you have to have an 8 bit data bus. Most (possibly all) modern x86 processors use a 64 bit data bus and every time they read from memory, they read 64 bits. If you only requested 8 bits, the excess is simply discarded.
/*
If you request more than 64 bits (for example, if loading 128 bit SSE registers), then there will be multiple memory accesses.

Many processors also have a concept of alignment, which basically means that every memory access is on a address divisible by the data bus width. Most can still fetch unaligned memory, but if it crosses an alignment boundary (for example, requesting 32 bits at address 0xFC on a 64 bit aligned system), you'll get multiple memory accesses, even if it would otherwise fit in the data bus.
*/

normally, 1byte=1cell is samllest size that cpu can read


CPU - 막대한양의 transistor가 조합된 결과물. transistor의 logic(조건문- if nor or either...)에 따라서 result가 갈림. cpu는 회로에 걸린 전압값을 저항/transistor를 거쳐 결과값을 출력함.
cpu자체는 연산을 하지 않음.


boolean - JVM에서 4 byte 정수 메모리를 사용, 1/0(T/F)값을 저장하나 Array(배열)인 경우 1byte 정수 배열의 메모리 사용 // https://docs.oracle.com/javase/specs/jvms/se11/html/jvms-2.html#jvms-2.3 - 2.3.4

int - C language에서는 OS에 따라 크기가 다름(16bit OS- 2byte, 32bit OS - 4byte), Java language 에서는 4byte
char - unicode를 저장

function의 lifecycle - method 호출시 stack에 로컬변수를 생성, 변수 호출이 끝나면 cache에서 사라짐

java - 전역변수가 없음

f-4byte부동소수점을 표현하는 접미사

.jar = user가 생성한 .class file의 jar(=jar,JavaARchive) / build/distributions/.zip도 동일

gradle compile.java = gradle이 해당 project의 compile을 함(javac 실행)

gradle 에서의 build folder - 언제나 재생성 가능함, 따라서 github upload를 하지않으며 삭제에 위험부담이 없음, build folder에 컴파일결과.class가 생성됨

.classpath/.project - eclipse가 참고하는 파일, 다른 editor에겐 의미가없음

.metadata - eclipse 사용중 관련한 설정을 저장하는파일

unicode hex code > enter가 0d0a로 표기됨, 

eclipse ctrl + i > 선택범위 코드 정렬

eclipse는 class객체(.java)를 저장할때 컴파일을 실행함, 저장즉시 bin하위 package 경로에 .clas가 생성됨

eclipse는 자체적 컴파일이 불가능함, javacompiler을 자동실행

정규화 > 지수부를 분리한 후 소수점 이하값을 x2을 곱하여 매 결과값을 0,1로 구분(ex-0.8x2=1.6=1 > 0.6x2=1.2=1 > 0.2x2 ..) 이를 가수부 23자리에 대입함. 남는 비트가 있다면 0으로 채움. 소수점 왼쪽에 1만 남도록 소수점을 이동하고 무조건 1이므로 해당값을 버린다


따라서 소수점 오른쪽값만 가수부가 된다
지수부는 한자리수 정수값에 127(bias)를 더한값을 2진수로 환산함

hdd는 전기신호를 n,s극으로 바꾸어 구분한다, hdd는 자석가루가 포함되어 있으므로 시간이 지나면 데이터가 소멸함

연결을(데이터 교환) 위한 매개체의 표준 규격/규칙 - Interface
ex)DVI(digital visual interface)규격 cable // 영상신호 송출, 음성신호 송출 불가능 - 이 경우 본체-스피커에 음성신호 송출 가능한 케이블을 사용
HDMI // 음성신호 송출 가능

JAVA 객체지향언어



object.function(method call)

object-객체
function/method-각기 다른 기능을 수행하는 객체의 하위기능
method call-method가 시행할 value를 호출하는행위, 각 method마다 입력받는 value상한이 다름.

외부 패키지에있는 class를 선언할 경우 path를 지정해야함
reference - 문자열을 담을 수 없음, 다른 메모리의 주소를 저장하는 변수
import class를 사용하기 위하여 외부 패키지에있는 class의 위치를 선언
assignment operator - 할당연산자,메모리에 값을 집어넣음

연산자와(+ - ..) 피연산자는(variable/reference) 띄어쓰기

데이터의 저장은 RAM/HDD( cpu L1,L2 cashe논외)
RAM에 저장시 변수로 저장, 사용 값 요구후 운영체제에서 할당되는방식.
HDD는 file로 저장

JVM에서 할당된 메모리값에 기계어를 Loading하는 / 객체(instance)를 저장하는(Heap) / Thread에게 할당된 공간  이존재
JVM에는 main 을 호출(실행)하는 thread가 존재, 각 thread마다 stack 1개 존재. stack은 method를 사용할 때 thread를 준비함(로컬변수-하위변수를 관리)
변수 - 데이터 저장을 위하여 확보/준비(생성)한 메모리, 데이터를 저장하는 변수를 사용하기 위한(준비시키는)행위 - 변수 선언(declaration)
변수는 (메모리 종류/DataType - 정수값/문자열/부동소수점.. - byte크기등) (메모리 별칭) ; 로 선언됨

primitive datatype -정수값 Byte(1/-128~127) Short(2/-32768~32767) 

int(4) long(8) / 부동소수점 float(4) double(8) boolean(4(jvm내부적)) / 문자 char(2)

JVM의 자료형정리

new로 생성하는 객체(사용자 지정 변수) > heap에 생성
method생성시 사용하는 local변수 > stack에 생성
class code > method area


byte -128~127 short 2^8*2 = -32768~32767 65536 int 2^8*4 long 2^8*8  float - 유효자리수 7자리 double 15자리 boolean - true/false값 char 0~65535(charcode를 사용하므로 음수x)

문자열은 객체이므로 data type에 속하지않음

선언은 변수에 값을 넣는것, 값을 정의하는것이 아님.
변수 할당연산자 '=' 는 변수에 값을 넣는행동을 수행. 할당연산자 기준 좌측값을 L-Value, 우측값을 R-Value;로 지칭함. 
L Value는 무조건 Variable이어야 함. R Value는 값,변수,표현식(expression)이 올 수 있다.

문장Statement = 자바 언어로 작성한 명령어
표현식expression = 실행을 완료하면 값을 리턴하는 문장


Reference 변수 의 구조 - object.Reference variable ///Reference(String,Thread,Date,Socket)메모리의 주소를 저장하는 변수//.Socket = network connection 정보를 저장하는 메모리의 주소
문자형 8개를 제외한 변수는 모두 reference 변수.

cpu = 64bit, 매 신호처리마다 4byte를 사용, java의경우 32bit 이 범주값내에선 단타성 변수의 처리시 메모리사용의 최소단위가 크므로(array의경우는 효율적)short,byte를 사용하지 않음.

long literal은 변수에 값의저장이 가능하더라도 byte에 넣을 수 없음-4byte 정수 literal(-128~127)의경우 가능


/*
####객체 = 언어단위에서 정의된 구조체?
*/


정수 literal은 4,8byte만 있으나 변수에 값을 저장할 수 있다면 처리함 int 이하범주의 literal은 각각이 다른 int범주로 묶임

/*
 cpu의 레지스터는 각 레지스터마다 2^bit수 만큼의 신호를 처리함(=레지스터의 크기) 메모리할당시 처리하는 신호는 레지스터의 크기와 정비례하는가
*/


java는 32bit단위로 문자열을 처리함, 1byte=8bit 32bit = 4byte, java에서 연산을 시행할 때 메모리 절약을 위하여 최소단위를 4byte로 할당하고 계산함.(short, byte값으로 정의하는것이 array를 제외하고 의미없음)
OS연산과 관계없음

객체는 복합 데이터를 처리하는 메모리 형식 // class file 등을 지칭할때도 객체라고 부르는 경우가 있음
class 객체의 기능을 정의한 설계도(구조체?)


Sandbox - 해당 프로그램이 다른 프로그램의 메모리에 간섭할 수 없음을 지칭함

부동소수점은 byte규격에 맞게 값을 넣어야함, 4byte부동소수점(f)을 8byte에 넣을경우 에러
정수와 부동소수점 연산시 부동소수점으로 출력됨 / float + float = float, 결과에서 값이 왜곡
7자리 이하의, 계산할경우가 없는 값은 float사용가능.계산필요시 double채용
char 변수에는 2진수로 된 문자코드값이 저장됨. '' single quaotation안에 문자를 넣어 지정해도 값은 2진수 문자의 UCS-2유니코드값이 저장됨

char 변수선언 = 문자코드값만 저장 / int 변수선언 = 정수값만 저장. 같은값을 선언해도 출력시 각각 문자 / 정수값이 출력


java.Scanner의 작동원리

키보드에서 input을 받음 > java.io.InputStream 래퍼런스에서 System.in(reference) = 키보드 전기신호를 받아 byte배열로 Scanner에 전달
scanner 스캔 후 할당된 변수에게 값을 넘겨줌, 이 시점 이후로는 scanner를 닫아도 문제가없음
nextline() method(명령) - enter 인풋 byte인 carrage return/ line feed이 걸릴경우 이하값을 버리고 나머지값을 저장함
nextInt() - space,tab,new line 의 input byte가 걸릴경우 앞까지의 입력값중 method 호출부터 다음 공백이
입력되기 전 까지의 문자데이터만을 int값으로 바꿔  [변수 = scanner.A();] 로 return, 숫자가 아닐경우 오류발생

#system.in = inputstream의 하위 메소드

scanner 사용시 scan이 정상적이지 않은건 커서문제

String reference가 scanner에서 할당된 값의 주소를 받아옴. 변수와 달리 다른 메소드
레퍼런스변수는 null로 초기화
배열선언시 일반변수외에는 new 선언, new선언시 해당메모리는 할당됨, array배열 변수사용시  Variable[0~(max-1)] 로 표기

context menu - 상황에 따라 다른 메뉴가 출력되는 ui를 지칭(ex)오른클릭 팝업)
refactor - rename - 변수명 일괄변경
final > 배열 갯수/상수를 저장한 변수의 값 변경을 막음


-배열과 인스턴스, 메소드,레퍼런스,참조,오프셋

배열의 개수를 변수에 저장하여 크기 변경을 쉽게 하기
배열의 개수를 저장한 변수를 함부로 변경하지 못하도록 한다. - final
코드를 관리하기 쉽도록 작은 기능단위로 분리한다. - method
Class하위 function인 method간 공유하는 변수는 class변수로 선언 - static variable
복합데이터를 저장할 메모리 설계 ( .class)
Class는 (datatype)메모리를 설계,관련method를 묶는 두분류밖에 없음.
같은패키지 내부 클래스사용시 import/참조할 필요 없음
배열은 같은 datatype을 여러개 저장하기위하여 메모리를 확보/할당(생성한다 라고 표현)받기위해 만듦

실제 값(int,byte,short,long... primative-datatype)을 저장하는 메모리 - instance 
메모리의 주소(offset-address)를 저장하는 변수 - reference(=pointer) / pri-datatype을 제외한 값을 저장

offset-address - 관리를 목적으로 기준점을 마련한 상대적인 주소(절대값x)

int[]([] = 배열선언, 레퍼런스가됨) arr(메모리 주소저장변수) = new int(pri-datatype)[3];(배열 instance, 실제 메모리를 생성하는 명령)
reference는 주소값 정의없이 쓸 수 없음(Data data; = X) 배열이아님
Data.getYears(); < 주소값을 받아오는 method, 해당 method가 받아올 주소값이 없는경우(Data정의가 안됬을경우)
null point exception error가 발생
연속된 배열의 저장소중 하나에 임의로 값을 할당할 수 있음
배열 인스턴스는 생성되는순간 기본값으로 0이 할당됨(boolean 의경우 false), 인스턴스 datatype[x] x 는 값을 할당할 수 있는 공간의 갯수
저장되었던 배열 인스턴스주소를 갖고있는 레퍼런스가 덮어씌워질 경우 인스턴스 주소를 잃어버려 접근할 수 없음
 > 주소를 잃어 접근 불가능한경우 사용이 불가능하므로 메모리가 낭비됨=garbage메모리(dangling object)
 jvm 실행중 메모리가 부족할때/CPU여유가 있을 때 관리정책을 참조하는 garbage collector에 의하여 garbage는 메모리할당이 해제됨
 jvm종료시에도 jvm이 사용하던 모든 메모리는 os에 반납되기에 garbage또한 할당이 해제됨

배열 선언과 동시에 인스턴스를 초기화 시킬때 new int[] 를 생략가능하나 int[] arr8 = {100,90,80}; 
레퍼런스 생성후 값 초기화할시 인스턴스 배열 갯수 생략불가능 ex) int[] arr8; arr8 = {100,90,80};

!!! 배열사용시 2회차이후 null값 발생시 []레퍼런스 변수체크

.class bytecode를 .exe(native)로 변환


gradle cleanEclipse - gradle eclipse // 프로젝트를 이클립스지향으로 컴파일, 이클립스에서 import를 가능하게함

method 내부에 선언된 변수를 local변수 라 칭한다.

public static void main의   "(String[] args)" - 또한 로컬변수(parameter임)

메인class에서 선언된 변수를 Instance Variable (인스턴스 필드(인스턴스 변수)) 라고함 > new 명령을 실행할 때 준비되는 변수
메인class에서 선언된 static 변수를 (static int classVar etc..) 를 클래스 필드(variable) = static field(변수) 라고칭함. 
> class가 로딩될 때 준비되는 변수

local변수 > method를 실행할 시 준비되는 변수

method 블록이 다르면 변수도 다름 > 따라서 같은 이름의 변수 선언가능, 다른 메서드 블록에 있는 변수 사용 불가(Exam71)

static method(class method)가(static void ~)  아닐경우(instance method, void ~) Instance Variable 사용 가능

method 안에 블록을 이용하여 변수의 사용 범위를 통제가능(ex ) public static void main (String[] args){int a; { " block"} } )
블록안에 선언된 변수는 블록을 실행 시 준비됨, 블록 밖에선 선언된 변수 사용불가, 블록 밖 변수와 같은 이름을 가진 변수선언 불가,다른 블록의 변수와 이름이 같은 변수 선언가능 > 블록나갈시 제거되기때문

** .js 는 method 내부 블록을 인정하지않음

형변환  - 정수변수값을 부동소수점 변수에 삽입

메모리 크기에 상관없이 정수변수의 값을 부동소수점 변수에 넣을 때 컴파일오류가 발생하지 않음, 실행시 유효자릿수를 초과시 값이 짤릴 수 있음.

부동소수점에서는 지수부(소수점 이하값)을 저장하기에 int보다 정수범위 저장가능수가 작다 = 값이 짤릴 수 있음.
부동소수점은 값을 삽입시 일정 값(float 7 Double 15) 이하는 값이 임의로 잘릴 수 있으나 에러가 뜨지 않음
부동소수점은 정수 변수에 저장할 수 없음 - 부동소수점 값을 정수 변수에 저장하고 싶다면 형변환(type casting/type conversion)문법을 사용해야함
부동소수점은 float을 double변수에 삽입시에도 왜곡 발생. > 처음부터 double변수를 사용하는것을 권장


*정수를 부동소수점 메모리에 저장시 명시적 형변환 필요없음, 숫자를 문자 변수에 저장 가능, 정수 메모리간 형변환 가능, 그외 형변환 불가.

>   ex) i = (int) f;//단, 소수점 이하의 수 (지수부?) 는 제거됨 = 정수부분만 저장
개발자가 명확하게 다른 형의 값의 저장을 지시하는 문법을 "명시적 형변환(explicit type conversion/casting)"이라 칭함

산술 연산자 : +, -, *, /,  % ( 나눈 나머지 ) - 연산우선순위(사칙연산 / https://toma0912.tistory.com/66 참고) 적용 

*java는 정수연산 최소단위가 4byte. 연산시 변수를 사용할 경우 byte/short의 연산단위는 기본 4byte.(임시 4byte 정수 메모리를 만듦) 
=>두 변수의 연산시 값이 복사되어 각 변수가 int타입으로 할당되므로 두개의 변수연산시 int값을 byte에 넣을 수 없음

JAVA는 변수선언시 jvm종료시까지 datatype은 바뀌지 않음, 명시적 형변환은 해당 변수를 임시메모리에서 형변환하여 저장하고 연산 및 출력. 

byte,short,char 는 암시적형변환시 연산시작전 int로 변환됨 > int => long => float => double 암시적 형변환은 정수와 부동소수점에서만 일어남(boolean X)

큰 메모리의 값을 작은 메모리에 저장을 목적으로 형변환을 사용하기도 하나 형변환 하더라도 값이 잘리지 않을경우만 시도. (Exam1_7)

= 할당 /== 비교연산
&&연산이 오른쪽을 실행하기 전 결과를 알 수 있을경우 JVM은 실행의 효율을 위해 &&연산의 오른쪽을 실행하지 않는다.
&연산자의 경우 왼쪽 값으로 결과를 예측할 수 있다 하더라도,결과에 상관 없이 & 오른쪽 문장을 무조건 실행

비트연산자 - 주로 그래픽 관련 개발에 사용
ex-비트연산 exclusive OR(같은값 0)  >  크로마킹 기법에 사용. 

double(datatype) EPSILON = 0.0000x; // 
의존객체
Instance에 주입되는 의존성 - dependency ex) ... = new Scanner(System.in) // System.in - 주어지는 입력값을 읽음
java dependency(object) - 의존객체 ex) Scanner A = new Scanner("dependency.dependency") =dependency injection(DI) 의존성 주입
dependency container(IOC container) - dependency의 DB

ReferenceVariable.Method(ex - Scanner A = new Scanner(System.in) int num = "A.nextInt()")

++ 기존변수 값 1씩 증가

비트 이동연산 곱셈연산 i << 1 = 2^1 / << 2 = 2^2 / << 3 = 2^3
>> 나눗셈연산

<<,>> 비트 이동연산의 연산방식 > 비트를 배수연산할 숫자만큼(>>3일경우 3칸) 오른쪽으로 이동함, 왼쪽의 남는 칸은 양수는 0, 음수는 1로 채움.
>>> 이동 후 남은칸을 무조건 1로 채움(양수)

* 비트 논리 연산자 &(and)를 이용하여 원하는 byte만 추출 가능 ex)  b = (i >> 16) * 0xff/f = 1111 = 15/  Tech interview 질문

byte의 첫자리수가 1 일경우 음수, 2의보수로 환산을하므로
 * -13
 * 00001101 = 13
 * 11110010
 * +      1
 * 11110011 = -13
  (00001100(+1) = 13) 
 같은 계산을 함

 

 /*
아나그램의 비교연산
1 - 경우의수를 나열하고 해당되는 조합을 픽업 - n! 팩토리얼을 사용한 연산
2 - 알파벳의 sorting을 이용한 연산 - nlog n 연산
 */

32비트데이터를 이용하여 True/false값을 저장할 때 비트 논리 연산 &(and)을 사용, ( 소유주 그룹 게스트의 사용권한을 표기할 때 )d rwx r-x r-x 
and 논리연산을 이용한 true/false값 비교 > 
(값이 들어있는 변수) & (특정 언어를 표현한 비트 값) > & 연산의 결과와 (특정 언어를 표현한 비트 값)이 같은지 비교.
비트 and 연산에서는 0을 사용할 시 원하지 않는 값을 거를 수 있음(비교대상자 간 비트가 동일해야 True값을 표현할 수 있기 때문)

비트연산 if (var & 0xX0) > 0 = X의 1/0 (true/false) 구분 // tech interview

0x00 = 16진수
0b00 = 2진수

i++ i-- 등의 후위연산자는 해당 라인을 실행 후 값을 증감시킴 / --i ++i 등의 전위연산자는 해당 값 연산을 우선함
int i = 7;
i = i++;

temp(int) 에 7 할당이후 i값이 증가 > i = 8이되나 temp(int)값에서 7이 씌워져 i에 7이 할당됨
= 7

후위연산자 사용시 j++ 선언된 변수 값 증가(j++의 값은 불변), int j = 의 변수값을 증가시키나 사용하는 j는 1이됨

int i = 2;
int result = i++ + i++ * i++; = 12

연산자 우선수위: 1) ++, --  2) *, /, % 3) +, -  4) =

변수는 전/후위 연산자로 인하여 값이 변화할 수 있으나 값은 전/후위 연산자에 의하여 변경될 수 없음

#할당연산자 = 와 statement = 

java에서 else는 가장 가까운 if에 소속됨

case값으로 상수 사용가능( finat int Var = 0, Var2 = 1 , Var3 = 2;...)
case값으로 변수사용 불가, 다만 값이 바뀌지 않은 final 변수는 사용 가능

상수를 enum을 사용해 별도 그룹으로 관리 가능( enum Level { var1 , var2 , var3 })
enum 변수에는 그 타입에 정의된 값만 저장할 수 있다.

while 문 label - label: while (x <= ~){} // 라벨명 : 반복문1 { 반복문2 { break:라벨명; }}  *
> label의 밖으로 나감. 없이 break;할경우 내부 루프에서만 탈출후 전체루프를 다시시작.


do while문 = while의 조건하에 있을경우 do를 실행

method명 앞에는 return조건이(없을시 void), 접미 괄호에는 '(local Variable   datatype값 parameter-출력값)'을 (int length..) 넣음

문자출력-single quaotation, 문자열 - double quaotation

class에서 직접 실행을 하지 않을경우 main method 선언이 필요없음

@Overloading > 실행기능이 같은 메소드는 같은 메소드명을 부여할 수 있음(parameter를 다르게 사용해야함)

Datatype VarName = class.method() > 해당 클래스 메소드를 호출

Object  DataType > 모든 종류의 데이터타입 수용 가능한 선언

git commit - m " " >>> git tag -a ~~~ -m ""  >  git commit -m " " >  git push origin (origin=server) ~~~ (tag name)

class = instance 구현방식을 정의해주는 설계도

reference는 primitive data type의 선언이 불가능
reference의 변수지정 = reference.var = X ;

배열문법으로는 인스턴스를 3천개 만들 수 없음(nullpointerexception, runtime error)
>loop 조건문으로 인스턴스를 3천개 만들면 사용가능

배열의 2중치환 > reference array생성 > instance가 비어있음 > instance를 loop반복문을 사용하여 reference array 배열을 변수로 바꿈

eclipse package explorer > sort package presentation hierarchical

value를 담고있는 instance의 address의 차후 사용을 목적으로 할 경우 reference 배열에 보관함.
> instanceaddress[i] = reference variable;

class - app에서의 특정 데이터 메모리 구조를 설계하는 문법 
개발자가 새롭게 정의한 데이터 타입을 사용자 정의 데이터 타입 으로 지칭함
class 는 이러한 데이터 타입을 만들 때 사용하는 문법

반복문의경우 실행시마다 instance 할당공간을 생성할 수 있음(선언을 먼저 하는것보다 메모리가 절약됨)
>Datatype(사용자정의Userdefine 데이터타입 = Class 명)[] referrencearrayVAR = new instance(=Datatype)[size(or value)];
loop{ Datatype refvar = new *class/instance* DataType();
referrencearrayVAR[i] = instanceaddress(VAR); // instance address(VAR)를 reference array에 보관

사용자 정의 데이터타입을 선언할 때 new를 사용해야함 > 해당 메모리를 사용시 reference변수가 필수

prompt = 즉각적 사용자입력

동일 switch문의 case는 같은 블럭으로 취급됨, 선언된 변수는 switch문에 소속되므로 다른 case에서 같은 변수명을 선언할 수 없음

eclipse에서 refactoring을 원하는 method는 refactor-extract method 옵션으로 뺄 수 있다

함수안에 선언된 변수를 "로컬(local)변수" 라 부름.
로컬 변수중 method가 호출될 때 넘어온 값을 받는 변수를 "파라미터parameter" 라 부름
함수 호출 시 넘겨주는 값을 "인자/argument" 라 부름, argument/parameter를 혼용하여 쓰는경우가 많음
ex) method(argument); ... static method(/DataType/parameter var,...) { statement }
parameter = 함수 블록실행시 외부에서 받은 값을 저장할 변수선언
method =function : 기능단위로 별도로 묶어놓은 명령어, 재사용목적으로 별도로 분리함.

language의 trade-off 언어의 속도와 코드의 난해/유지보수의 타협을찾는행위

call by value - method 호출시 값을 넘김 ( parameter의 datatype이 primative datatype 일 경우 ) method종료시 사라짐
call by reference - method 호출시 주소를 넘김, void method에서 메모리 instance에 접근이 가능함.


new로 생성하는 객체(사용자 지정 변수) > heap에 생성
method생성시 사용하는 local변수 > stack에 생성
class code > method area

리턴하지않는 method는 JVM-stack에 저장되므로 method 종료시 사라짐, new로 선언된 reference는 JVM-heap에 저장되므로
method 종료후에도 사라지지않음

블럭이있는 조건문은 method가 아니므로 value를 리턴할 수 있음.

JVM STACK에 main method에서 사용 할 args(로컬변수등)이 저장됨

JAVA(JVM Memory)에서의 프로그램 작동 순서
Class loading > main() call > (JVMSTACK) main() method 실행 중 사용할 local variable 준비(=args/a/b/...), 이 method를 관리하는 대상을 frame으로 지칭
local variable에 value 저장 > method2() call > method2()가 사용할 local variable 준비 > argument를 parameter에 저장 /
8> code execute


객체는 return 할 수 없다. 객체의 주소를 return하는것.

new *(); = *의 설계도에 따라 heap에 메모리를 생성 > *.VAR 의 형식으로 메모리를 할당
new 명령어로 만들어 진 모든 메모리는 heap에 생성됨. > stack overflow 원인

재귀호출 > 호출시 매 수행마다 jvm stack 에 메모리가 쌓임 >
(JVM Stack memory가 꽉 차서 더이상 메서드실행을 위해 로컬 변수를 만들 수 없는 상태)
>stack overflow

//메소드 호출이 너무 깊어지는 경우는 재귀호출 대신 다른 방법을 사용 ex)반복문


.class > method분류의 class, class A {} >사용자 정의 데이터타입에서의 class


java 재귀호출 > 재귀호출 method를 재귀호출 method 내부에서 다시 call 하여 연산함. method가 지속적으로 stack memory에 쌓임.

eclipse > ctrl + click

변수는 개별 관리 / method는 공유하는것이 유지보수의 핵심

non-static field = instance field > new를 사용할 경우 instance생성시에 만들어짐
static field = class field

instance 는 non-static var의 집합, method가 소속될 수 없음

static field에서는 classname 으로 var에 접근

public의 유무 > 다른 package에 소속된 class의 접근 가능유무


class 명 = datatype = 역할명
static = class 소속임을 지칭/default,none(static이 없을경우) = instance 소속
private내부소속,접근범위제어용/protected/public공개+/default같은패키지 > 해당 class의 공개여부


method의 static / none 도 class에서의 static none과 동일하게 소속여부를 지칭
class 구성요소 > member
class는 필드string/datatype~/생성자class()/메서드선언void var()/instance block선언{}/static block선언static{} 의 45류가있음

eclipse clean > JavaCompiler가 전체 sourcefile을 다시 compile하게함
classfile $ > 중첩클래스(public class .java)의 하위클래스 + number > method 하위 소속시 추가
.class < local class, 소스파일에 소속되지 않음.
하위패키지 =/ 반드시 소속됨을 뜻하는것이 아님
class를 다른 package에서 사용시 public, 아닐경우 default(같은 package소속일경우 만 사용가능)

객체지향 분석 설계에서는 DataType의 관점에서 method = operator 로 여김(연산자를 정의하는 방식으로 method사용) > static을 붙이지 않음
instance의 값을 사용하는 method = operator연산자
instance method는 instance 주소를 받는 내장 변수Built-in가 있다(this)
method를 instanceaddress.methodname();의 문장으로 호출할 때 instanceaddress를 자동으로 받는 내장변수가 있음
static을 붙이지않음. / 이 경우 instance method를 class name으로 호출할 수 없음.(instanceaddress사용)
method call 시 instanceaddress는 built-in this 에 자동보관됨(선언하지 않음).
instance data를 다루는 operator(method)는 static으로 호출이 가능하나,non-static/instance method로 사용가능.-instanceVAR값을 사용시 사용
instanceaddress 값을 사용함.(parameter/static제거 this. 사용)

static method에는 this 내장변수가 없음.

static 문법 > Classname.operator연산자(피연산자);
non-static 문법 > 피연산자.operator연산자(); // 내장변수 this 사용

지역변수와 달리 field는 0으로 자동 초기화됨

reserved keyword > java에서 선점하여 변수명으로 사용 불가능한 단어(ex- this..)

instance변수 생성 > new 명령어가 필요함.
static > new가 필요하지 않음.

개별적으로 관리되는 인스턴스변수 result 사용을 원할 시 파라미터로 인스턴트의 주소를 받아야 함 > 변수의 static 제거 + instanceVAR 사용
=기존 method를 instance method로 변환해야함

static변수는 class가 loading될때 한 번만 호출되므로 둘 이상 사용이 불가능하다.